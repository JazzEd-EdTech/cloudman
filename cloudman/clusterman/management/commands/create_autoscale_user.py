import logging as log

from django.contrib.auth.models import Permission
from django.contrib.auth.models import User
from django.core.management.base import BaseCommand

from clusterman.models import GlobalSettings


class Command(BaseCommand):
    help = 'Creates a user for managing autoscaling. This user has permissions to scale' \
           'the cluster only, and cannot perform any other cluster admin actions.'

    def add_arguments(self, parser):
        parser.add_argument(
            '--username', default='autoscaleuser',
            help='username for autoscaling endpoint')
        parser.add_argument(
            '--password', required=False,
            help='Password for this user, autogenerated if not specified')
        parser.add_argument(
            '--impersonate_account', required=False,
            help='User account to impersonate when scaling. This account is assumed to have stored'
                 ' cloud credentials or IAM access. Defaults to the first super admin found.')

    def handle(self, *args, **options):
        username = options['username']
        password = options['password']
        account = options['impersonate_account']

        return self.create_autoscale_user(username, password, account)

    @staticmethod
    def _add_permissions(user, perm_names):
        for name in perm_names:
            permission = Permission.objects.get(codename=name)
            user.user_permissions.add(permission)
        return user

    @staticmethod
    def create_autoscale_user(username, password, account):
        try:
            print("Creating autoscale user: {0}".format(username))
            user, created = User.objects.get_or_create(username=username)
            if created:
                user.set_password(password)
                Command._add_permissions(
                    user, ['view_cmcluster', 'add_cmclusternode',
                           'delete_cmclusternode'])
                user.save()
                if account:
                    impersonate_user = User.objects.get(username=account)
                else:
                    impersonate_user = User.objects.filter(is_superuser=True).first()
                GlobalSettings().settings.autoscale_impersonate = impersonate_user.username
                return "Autoscale user created successfully."
            else:
                return "Autoscale user already exists."
        except Exception as e:
            log.exception("An error occurred while creating the autoscale user!!:")
            return ("An error occurred while creating the autoscale user!!: %s" % e)
